{"version":3,"file":"static/js/149.10a5d53f.chunk.js","mappings":"oMAEaA,EAAa,SAAHC,GAAoB,IAAdC,EAAMD,EAANC,OACrBC,GAAWC,EAAAA,EAAAA,MACjB,OACEC,EAAAA,EAAAA,KAAA,MAAAC,SACGJ,EAAOK,KAAI,SAAAC,GAAK,IAAAC,EAAA,OACfJ,EAAAA,EAAAA,KAAA,MAAAC,UACED,EAAAA,EAAAA,KAACK,EAAAA,GAAI,CAACC,GAAE,WAAAC,OAAaJ,EAAMK,IAAMC,MAAO,CAAEC,KAAMZ,GAAWG,SAC7C,QAD6CG,EACxDD,EAAMQ,aAAK,IAAAP,EAAAA,EAAID,EAAMS,QAFjBT,EAAMK,GAIV,KAIb,C,uJCbaK,EAAa,WACxB,IAAAC,GAAoBC,EAAAA,EAAAA,MAAbC,GAA8BC,EAAAA,EAAAA,GAAAH,EAAA,GAArB,GAMhB,OACEI,EAAAA,EAAAA,MAAA,QAAAjB,SAAA,EACED,EAAAA,EAAAA,KAAA,SACEY,KAAK,WACLO,KAAK,OACLC,UAAU,yBACVC,aAAa,MACbC,WAAS,EACTC,YAAY,0BACZC,UAAQ,KAEVxB,EAAAA,EAAAA,KAAA,UAAQmB,KAAK,SAASM,QAfL,SAAAC,GACnBV,EAAU,CAAEW,QAASD,GACvB,EAagDzB,SAAC,aAKnD,E,SClBe,SAAS2B,IACtB,IAAAC,GAA4BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAd,EAAAA,EAAAA,GAAAY,EAAA,GAAjChC,EAAMkC,EAAA,GAAEC,EAASD,EAAA,GACxBE,GAA8BH,EAAAA,EAAAA,WAAS,GAAMI,GAAAjB,EAAAA,EAAAA,GAAAgB,EAAA,GAAtCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAC1BG,GAA0BP,EAAAA,EAAAA,WAAS,GAAMQ,GAAArB,EAAAA,EAAAA,GAAAoB,EAAA,GAAlCE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAEtBxB,GAAuBC,EAAAA,EAAAA,MACjB0B,GADkCxB,EAAAA,EAAAA,GAAAH,EAAA,GAArB,GACc4B,IAAI,YAuBrC,OArBAC,EAAAA,EAAAA,YAAU,WAKuB,SAAAC,IAY9B,OAZ8BA,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAA/B,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAGoB,OAHpBF,EAAAC,KAAA,EAEId,GAAW,GACXI,GAAS,GAAOS,EAAAE,KAAA,GACGC,EAAAA,EAAAA,IAAmBX,GAAa,KAAD,EAA5CO,EAAIC,EAAAI,KACVC,QAAQC,IAAIP,GACZhB,EAAUgB,EAAKQ,SAASP,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAQ,GAAAR,EAAA,SAExBT,GAAS,GAAM,QAEG,OAFHS,EAAAC,KAAA,GAEfd,GAAW,GAAOa,EAAAS,OAAA,6BAAAT,EAAAU,OAAA,GAAAZ,EAAA,0BAErBa,MAAA,KAAAC,UAAA,CAhBIpB,IAGLa,QAAQC,IAAId,GAAa,WACMG,EAAAgB,MAAC,KAADC,UAAA,CAa/BC,GACF,GAAG,CAACrB,KAGFvB,EAAAA,EAAAA,MAAA6C,EAAAA,SAAA,CAAA9D,SAAA,EACED,EAAAA,EAAAA,KAACa,EAAU,IAEV0B,IAASvC,EAAAA,EAAAA,KAAA,KAAAC,SAAG,qCACZkC,IAAWnC,EAAAA,EAAAA,KAACgE,EAAAA,EAAM,IAClBnE,EAAOoE,OAAS,IAAKjE,EAAAA,EAAAA,KAACL,EAAAA,EAAU,CAACE,OAAQA,MAGhD,C","sources":["components/MoviesList/MoviesList.jsx","components/SearchForm/SearchForm.jsx","pages/Movies.jsx"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <ul>\n      {movies.map(movie => (\n        <li key={movie.id}>\n          <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n            {movie.title ?? movie.name}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import { useSearchParams } from 'react-router-dom';\n\nexport const SearchForm = () => {\n  const [setParams] = useSearchParams();\n\n  const handleSubmit = value => {\n    setParams({ toSeach: value });\n  };\n\n  return (\n    <form>\n      <input\n        name=\"toSearch\"\n        type=\"text\"\n        className=\"input SearchForm-input\"\n        autoComplete=\"off\"\n        autoFocus\n        placeholder=\"Search movie by name...\"\n        required\n      />\n      <button type=\"submit\" onClick={handleSubmit}>\n        Search\n      </button>\n    </form>\n  );\n};\n","import { fetchMovieBySearch } from 'api/api';\nimport { Loader } from 'components/Loader/Loader';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\nimport { SearchForm } from 'components/SearchForm/SearchForm';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nexport default function Movies() {\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const [searchParams] = useSearchParams();\n  const searchQuery = searchParams.get('toSearch');\n\n  useEffect(() => {\n    if (!searchQuery) {\n      return;\n    }\n    console.log(searchQuery);\n    async function getMoviebySearch() {\n      try {\n        setLoading(true);\n        setError(false);\n        const resp = await fetchMovieBySearch(searchQuery);\n        console.log(resp);\n        setMovies(resp.results);\n      } catch (error) {\n        setError(true);\n      } finally {\n        setLoading(false);\n      }\n    }\n    getMoviebySearch();\n  }, [searchQuery]);\n\n  return (\n    <>\n      <SearchForm />\n\n      {error && <p>Something went wrong, try again.</p>}\n      {loading && <Loader />}\n      {movies.length > 0 && <MoviesList movies={movies} />}\n    </>\n  );\n}\n"],"names":["MoviesList","_ref","movies","location","useLocation","_jsx","children","map","movie","_movie$title","Link","to","concat","id","state","from","title","name","SearchForm","_useSearchParams","useSearchParams","setParams","_slicedToArray","_jsxs","type","className","autoComplete","autoFocus","placeholder","required","onClick","value","toSeach","Movies","_useState","useState","_useState2","setMovies","_useState3","_useState4","loading","setLoading","_useState5","_useState6","error","setError","searchQuery","get","useEffect","_getMoviebySearch","_asyncToGenerator","_regeneratorRuntime","_callee","resp","_context","prev","next","fetchMovieBySearch","sent","console","log","results","t0","finish","stop","apply","arguments","getMoviebySearch","_Fragment","Loader","length"],"sourceRoot":""}